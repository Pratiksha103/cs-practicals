# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
shift = 3 # defining the shift count

text = "HELLO WORLD"

encryption = ""

for c in text:

    # check if character is an uppercase letter
    if c.isupper():

        # find the position in 0-25
        c_unicode = ord(c)

        c_index = ord(c) - ord("A")

        # perform the shift
        new_index = (c_index + shift) % 26

        # convert to new character
        new_unicode = new_index + ord("A")

        new_character = chr(new_unicode)

        # append to encrypted string
        encryption = encryption + new_character

    else:

        # since character is not uppercase, leave it as it is
        encryption += c
        
print("Plain text:",text)

print("Encrypted text:",encryption)

shift = 3 # defining the shift count

encrypted_text = "KHOOR "

plain_text = ""

for c in encrypted_text:

    # check if character is an uppercase letter
    if c.isupper():

        # find the position in 0-25
        c_unicode = ord(c)

        c_index = ord(c) - ord("A")

        # perform the negative shift
        new_index = (c_index - shift) % 26

        # convert to new character
        new_unicode = new_index + ord("A")

        new_character = chr(new_unicode)

        # append to plain string
        plain_text = plain_text + new_character

    else:

        # since character is not uppercase, leave it as it is
        plain_text += c
        
print("Encrypted text:",encrypted_text)

print("Decrypted text:",plain_text)


def sequence(n):
    arr=[]
    i=0
    while(i<n-1):
        arr.append(i)
        i+=1
    while(i>0):
        arr.append(i)
        i-=1
    return(arr)
def railfence(s,n):
    s=s.lower()
    L=sequence(n)
    print("The raw sequence of indices: ",L)
    temp=L
    while(len(s)>len(L)):
        L=L+temp
    for i in range(len(L)-len(s)):
        L.pop()
        print("The row indices of the characters in the given string: ",L)
    print("Transformed message for encryption: ",s)
    num=0
    cipher_text=""
    while(num<n):
        for i in range(L.count(num)):
            cipher_text=cipher_text+s[L.index(num)]
            L[L.index(num)]=n
        num+=1
    print("The cipher text is: ",cipher_text)
   
plain_text=input("Enter the string to be encrypted: ")
n=int(input("Enter the number of rails: "))
railfence(plain_text,n)

def sequence(n):
    arr=[]
    i=0
    # creating the sequence required for
    # implementing railfence cipher
    # the sequence is stored in array
    while(i<n-1):
        arr.append(i)
        i+=1
    while(i>0):
        arr.append(i)
        i-=1
    return(arr)

# this is to implement the logic
def railfence(cipher_text,n):
# converting into lower cases
    cipher_text=cipher_text.lower()
    L=sequence(n)
    print("The raw sequence of indices: ",L)
    temp=L
    while(len(cipher_text)>len(L)):
            L=L+temp
    for i in range(len(L)-len(cipher_text)):
        L.pop()
        temp1=sorted(L)
    
    print("The row indices of the characters in the cipher string: ",L)

    print("The row indices of the characters in the plain string: ",temp1)
    
    print("Transformed message for decryption: ",cipher_text)

    # converting into plain text
    plain_text=""
    for i in L:
        k=temp1.index(i)
        temp1[k]=n
        plain_text+=cipher_text[k]
        
    print("The plain text is: ",plain_text)


cipher_text=input("Enter the string to be decrypted: ")
n=int(input("Enter the number of rails: "))
railfence(cipher_text,n)

